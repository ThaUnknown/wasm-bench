import{K as m}from"./index-Bh4Xcgru.js";import{p as A}from"./pako.esm-QcQmc0Ou.js";let a,c=null;function g(){return(c===null||c.byteLength===0)&&(c=new Uint8Array(a.memory.buffer)),c}let b=0;function S(e,n){const t=n(e.length*1,1)>>>0;return g().set(e,t/1),b=e.length,t}let i=null;function y(){return(i===null||i.buffer.detached===!0||i.buffer.detached===void 0&&i.buffer!==a.memory.buffer)&&(i=new DataView(a.memory.buffer)),i}function k(e,n){return e=e>>>0,g().subarray(e/1,e/1+n)}function z(e){try{const s=a.__wbindgen_add_to_stack_pointer(-16),f=S(e,a.__wbindgen_export_0),o=b;a.gzip_compress(s,f,o);var n=y().getInt32(s+4*0,!0),t=y().getInt32(s+4*1,!0),r=k(n,t).slice();return a.__wbindgen_export_1(n,t*1,1),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}async function I(e,n){if(typeof Response=="function"&&e instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(e,n)}catch(r){if(e.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",r);else throw r}const t=await e.arrayBuffer();return await WebAssembly.instantiate(t,n)}else{const t=await WebAssembly.instantiate(e,n);return t instanceof WebAssembly.Instance?{instance:t,module:e}:t}}function W(){const e={};return e.wbg={},e}function U(e,n){return a=e.exports,d.__wbindgen_wasm_module=n,i=null,c=null,a}async function d(e){if(a!==void 0)return a;typeof e<"u"&&(Object.getPrototypeOf(e)===Object.prototype?{module_or_path:e}=e:console.warn("using deprecated parameters for the initialization function; pass a single object instead")),typeof e>"u"&&(e=new URL("/wasm-bench/assets/gzip_wasm_bg-BytgT0Zw.wasm",import.meta.url));const n=W();(typeof e=="string"||typeof Request=="function"&&e instanceof Request||typeof URL=="function"&&e instanceof URL)&&(e=fetch(e));const{instance:t,module:r}=await I(await e,n);return U(t,r)}await d();function B(e){const n=new Uint8Array(e),t=65536;for(let r=0;r<e;r+=t)n.set(crypto.getRandomValues(new Uint8Array(Math.min(t,e-r))),r);return n}const L=8,M=128*1024*1024,h=[];for(let e=L;e<=M;e*=2)h.push(e);const l=new m({name:"GZIP",iterations:10,time:1e4,warmupIterations:5});l.concurrency=null;l.threshold=1;const u=new m({name:"CompressionStream",iterations:10,time:1e4,warmupIterations:5});u.concurrency=null;u.threshold=1;const w=new m({name:"Pako",iterations:10,time:1e4,warmupIterations:5});w.concurrency=null;w.threshold=1;console.log("Setting up GZIP benchmarks...");for(const e of h){const n=B(e);l.add(`${e}`,()=>z(n)),u.add(`${e}`,async()=>{const{writable:t,readable:r}=new CompressionStream("gzip"),s=t.getWriter();return s.write(n),s.close(),await new Response(r).arrayBuffer()}),w.add(`${e}`,()=>A.gzip(n))}function p(e,n){const t=e.map(({name:f,result:o})=>{if(!o)return{name:f,suite:n,error:"No result"};const _=o.latency?.samples.length||0,R=o.throughput?.samples.length||0;return{name:f,suite:n,latency:_,throughput:R,result:o}}),r=JSON.stringify(t,null,2),s=document.createElement("a");s.href=URL.createObjectURL(new Blob([r],{type:"application/json"})),s.download=`${n}-benchmark-results-${new Date().toISOString().slice(0,19).replace(/:/g,"-")}.json`,s.textContent="Download GZIP Results",document.body.appendChild(s)}console.log("Running GZIP benchmarks...");p(await l.run(),"wasm-gzip");p(await u.run(),"compression-stream");p(await w.run(),"pako");console.log("Benchmarking completed!");
