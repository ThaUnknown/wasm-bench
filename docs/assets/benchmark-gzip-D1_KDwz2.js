import{K as o}from"./index-hVQJA9mG.js";let a;async function g(n,e){if(typeof Response=="function"&&n instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(n,e)}catch(i){if(n.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",i);else throw i}const t=await n.arrayBuffer();return await WebAssembly.instantiate(t,e)}else{const t=await WebAssembly.instantiate(n,e);return t instanceof WebAssembly.Instance?{instance:t,module:n}:t}}function m(){const n={};return n.wbg={},n}function p(n,e){return a=n.exports,c.__wbindgen_wasm_module=e,a}async function c(n){if(a!==void 0)return a;typeof n<"u"&&(Object.getPrototypeOf(n)===Object.prototype?{module_or_path:n}=n:console.warn("using deprecated parameters for the initialization function; pass a single object instead")),typeof n>"u"&&(n=new URL("/wasm-bench/assets/gzip_wasm_bg-BytgT0Zw.wasm",import.meta.url));const e=m();(typeof n=="string"||typeof Request=="function"&&n instanceof Request||typeof URL=="function"&&n instanceof URL)&&(n=fetch(n));const{instance:t,module:i}=await g(await n,e);return p(t,i)}function s(n){let e=n.length;for(;--e>=0;)n[e]=0}const A=3,_=258,f=29,h=256,S=h+1+f,w=30,d=512,I=new Array((S+2)*2);s(I);const C=new Array(w*2);s(C);const D=new Array(d);s(D);const O=new Array(_-A+1);s(O);const E=new Array(f);s(E);const L=new Array(w);s(L);try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{}const r=new Uint8Array(256);for(let n=0;n<256;n++)r[n]=n>=252?6:n>=248?5:n>=240?4:n>=224?3:n>=192?2:1;r[254]=r[254]=1;await c();const l=new o({name:"GZIP",iterations:10,time:1e4,warmupIterations:5});l.concurrency=null;l.threshold=1;const y=new o({name:"CompressionStream",iterations:10,time:1e4,warmupIterations:5});y.concurrency=null;y.threshold=1;const u=new o({name:"Pako",iterations:10,time:1e4,warmupIterations:5});u.concurrency=null;u.threshold=1;console.log("SIMD Support:",(void 0)());const b=new Uint8Array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),M=(void 0)(b);console.log("Original:",Array.from(b));console.log("SIMD +1: ",Array.from(M));throw"uwu";
